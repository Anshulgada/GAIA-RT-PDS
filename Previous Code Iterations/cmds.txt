-- pip3 install fastapi uvicorn onnxruntime opencv-python numpy requests

To start the server:

-- python3 model_server.py --weights yolov10m.onnx --class-names class.json --port 8000

To run inference on a video:

-- python3 video_processor.py --input-type video --input-path path/to/video.mp4 --output-path output.mp4 --server-url http://localhost:8000/predict

To run inference on webcam:

-- python3 video_processor.py --input-type webcam --output-path output.mp4 --server-url http://localhost:8000/predict


---------------------------------------------------------------------------------------------------------------------------------------


To use these new features:

Start the enhanced model server:

-- python3 enhanced_model_server.py --weights path/to/weights.onnx --class-names path/to/class_names.json --model-name my_model --port 8000

Run the enhanced video processor:

-- python3 enhanced_video_processor.py --input-path path/to/video.mp4 --output-path output.mp4 --server-url http://localhost:8000/predict --model my_model --confidence 0.6


---------------------------------------------------------------------------------------------------------------------------------------


To use this web interface:

-- pip3 install flask

Run the web interface:
-- python3 web_interface.py --input path/to/video.mp4 --server-url http://localhost:8000

Open a web browser and go to http://localhost:5000


---------------------------------------------------------------------------------------------------------------------------------------

To use this system:

Install required libraries:
-- pip3 install geopy Pillow

Set up an email account for sending alerts. If using Gmail, you'll need to create an "App Password" for security.
Modify the main section of the script with your SMTP server details and recipient email address.
Integrate this system with your existing object detection pipeline by calling the process_frame_with_alerts function instead of (or in addition to) your current frame processing function.

To integrate this with your existing code:

Import the necessary components in your main script:
-- from location_alerts import LocationBasedAlerts, process_frame_with_alerts

Initialize the AlertSystem in your main function:
alerts = LocationBasedAlerts(
    smtp_server="smtp.gmail.com",
    smtp_port=587,
    sender_email="your_email@gmail.com",
    sender_password="your_app_password"
)

Modify your frame processing loop to use process_frame_with_alerts:
# Inside your video processing loop
location_data = "Current location info"  # You'll need to implement this based on your setup
frame = process_frame_with_alerts(
    frame, predictions, class_names, alerts,
    recipient="recipient@example.com", location_data=location_data
)


---------------------------------------------------------------------------------------------------------------------------------------


To use this updated code:

When running the script, you can now enable alerts and specify a recipient email like this:

-- python3 enhanced_video_processor.py --input-path your_video.mp4 --output-path output.mp4 --enable-alerts --recipient-email user@example.com

Make sure to replace the SMTP server details and sender email/password in the LocationBasedAlerts initialization with your actual email server details.